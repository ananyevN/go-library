// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/bxcodec/library/domain"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, book
func (_m *BookRepository) Add(ctx context.Context, book *domain.Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BookRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, num, offset
func (_m *BookRepository) Fetch(ctx context.Context, num int, offset int) ([]domain.Book, error) {
	ret := _m.Called(ctx, num, offset)

	var r0 []domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Book); ok {
		r0 = rf(ctx, num, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, num, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *BookRepository) GetById(ctx context.Context, id int) (domain.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, book
func (_m *BookRepository) Update(ctx context.Context, book *domain.Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
